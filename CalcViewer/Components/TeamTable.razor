@using Microsoft.Extensions.Logging
@inject ILogger<TeamTable> Logger

<MudTable Items="@teams" Hover="true" SortLabel="Sort by" MultiSort="true" Class="darken-50">
    <ToolBarContent>
        <MudTextField @bind-Value="searchString" Placeholder="Team Name" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 col-8 text-light"></MudTextField>
        <MudTextField @bind-Value="charsearchString" Placeholder="Character" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 col-4 text-light"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh> <MudTableSortLabel SortBy="new Func<Team, object>(x => x.name)">Team</MudTableSortLabel></MudTh>
        <MudTh>Character 1</MudTh>
        <MudTh>Character 2</MudTh>
        <MudTh>Character 3</MudTh>
        <MudTh>Character 4</MudTh>
        @if (Calc.dmgType == "dps")
        {
            <MudTh> <MudTableSortLabel SortBy="new Func<Team, object>(x => -x.dpm)">DPS </MudTableSortLabel></MudTh>
            <MudTh> <MudTableSortLabel SortBy="new Func<Team, object>(x => -x.dpmAoe)">DPS AOE</MudTableSortLabel></MudTh>
        }
        else
        {
            <MudTh> <MudTableSortLabel SortBy="new Func<Team, object>(x => -x.dpm)">DPM </MudTableSortLabel></MudTh>
            <MudTh> <MudTableSortLabel SortBy="new Func<Team, object>(x => -x.dpmAoe)">DPM AOE</MudTableSortLabel></MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        @if (InFilter(context))
        {
            <MudTd DataLabel="Team">
                <a class="clickable" id="@context.name" @onclick="() => Selected(context)" style="@((context == selected || context == compare) ? "color: var(--color-highlight); font-weight: bold;" : "")"> @context.name</a>
            </MudTd>
            <MudTd DataLabel="Character 1" class="char">
                <div class="text-@context.characters[0].element">
                    @context.characters[0].name
                </div>
            </MudTd>
            <MudTd DataLabel="Character 2" class="char">
                <div class="text-@context.characters[1].element">
                    @context.characters[1].name
                </div>
            </MudTd>
            <MudTd DataLabel="Character 3" class="char">
                <div class="text-@context.characters[2].element">
                    @context.characters[2].name
                </div>
            </MudTd>
            <MudTd DataLabel="Character 4" class="char">
                <div class="text-@context.characters[3].element">
                    @context.characters[3].name
                </div>
            </MudTd>
            @if (Calc.dmgType == "dps")
            {
                <MudTd DataLabel="DPS" Class="text-light">
                    @((context.dps / 1000).ToString("N2"))k
                </MudTd>
                <MudTd DataLabel="DPS AOE" Class="text-light">
                    @((Calc.ToDps(context.dpmAoe, context.rotlen) / 1000).ToString("N2"))k
                </MudTd>
            }
            else
            {
                <MudTd DataLabel="DPM">
                    @context.dpm mi
                </MudTd>
                <MudTd DataLabel="DPM AOE">
                    @context.dpmAoe mi
                </MudTd>
            }
        }
    </RowTemplate>
</MudTable>

@code {
    [CascadingParameter]
    IEnumerable<Team> teams { get; set; }

    [Parameter]
    public bool comparing { get; set; }

    [Parameter]
    public Team selected { get; set; }
    [Parameter]
    public Team compare { get; set; }

    string searchString = "";
    string charsearchString = "";

    [Parameter]
    public EventCallback<Team> OnTeamSelected { get; set; }

    async void Selected(Team team)
    {
        await OnTeamSelected.InvokeAsync(team);
        if (comparing)
            compare = team;
        else
            selected = team;
    }

    private string GetRowClass(Team item, int rowIndex)
    {
        return rowIndex % 2 == 0 ? "darken-50" : "";
    }

    bool InFilter(Team element)
    {
        if (String.IsNullOrEmpty(searchString))
        {
            return InFilterChar(element);
        }
        bool veredict = false;
        string[] includes = searchString.Replace(",", "+").Split("+");
        foreach (string f in includes)
        {
            if (element.name.Contains(f.Trim(), StringComparison.OrdinalIgnoreCase))
            {
                veredict = InFilterChar(element);
                break;
            }
        }
        /*if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;*/
        Logger.LogInformation("FELL THROUGH");
        return veredict;
    }

    bool InFilterChar(Team element)
    {
        if (String.IsNullOrEmpty(charsearchString))
        {
            return true;
        }
        bool veredict = false;
        string[] dont = charsearchString.Split("-");
        veredict = InFilterChar(element, dont[0].Split("+"));
        if (dont.Length > 1 && veredict) // if above check failed, skip
        {
            for (int i = 1; i < dont.Length; i++)
            {
                if (InFilterChar(element, dont[i].Split("+"))) // return false because we don't want this character
                {
                    return false;
                }
            }
        }
        return veredict;
    }

    bool InFilterChar(Team element, string[] includes)
    {
        bool veredict = false;
        foreach (string f in includes) // must be included
        {
            //Logger.LogInformation("INCLUDES: " + f);
            string[] or = f.Split(",");
            foreach (string o in or) // also include
            {
                foreach (Character character in element.characters)
                {
                    if (character.name.Contains(o.Trim(), StringComparison.OrdinalIgnoreCase))
                    {
                        veredict = true;
                        break;
                    }
                }
                if (veredict)
                {
                    break;
                }
            }
            if (!veredict)
            {
                //Logger.LogInformation("FAILED AND OPERATION");
                return false;
            }
            veredict = false;
        }
        return true;
    }
}

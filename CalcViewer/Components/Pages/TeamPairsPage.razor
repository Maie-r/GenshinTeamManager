@page "/TeamPairsPage"
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<TeamPairsPage> Logger
<link rel="stylesheet" href="css/tableresize.css" @onload="cssLoaded"/>


@if (Loading < 2)
{
    <span> Loading Teams </span>

}
else
{
    <h1 class="text-center m-2"> Team Pairings </h1>
    @if (Calc.teams.Count <= 0)
    {
        <h4 class="p-4">No teams registered!</h4>
        <h4 class="p-4">you can add them in <a class="clickable" @onclick="NavigateToEditPage">(this page)</a></h4>
    }
    else
    {
        <div class="px-md-2 px-lg-4">
            @if (selected != null)
            {
                <CascadingValue Value="selected" Name="Selected Pair">
                    <CascadingValue Value="compaired" Name="Pair to Compare">
                        <TeamPairDetails />
                    </CascadingValue>
                </CascadingValue>
            }
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" @onchange="ToggleCompare">
                <label class="form-check-label" for="flexCheckDefault">
                    Compare
                </label>
            </div>
            @foreach (KeyValuePair<string, SortedDictionary<double, Team[]>[]>server in everything)
            {
                @if (MultipleAccount)
                {
                    <a class="clickable d-flex justify-content-center flex-row flex-nowrap text-center" @onclick="() => Collapse(server.Key)"><h2>@server.Key</h2> <MudIcon class="text-center" Size="Size.Large" Icon="@(svtablestate[server.Key] == "shown" ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)"></MudIcon></a>
                }
                <div id="@server.Key" class="@svtablestate[server.Key]">
                    <MudTable Items="@server.Value[0].AsEnumerable()" Hover="true" SortLabel="Sort by" MultiSort="true" Class="darken-50">
                        <ToolBarContent>
                            <MudTextField @bind-Value="searchString" Placeholder="Search" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 text-light"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh> <MudTableSortLabel SortBy="new Func<KeyValuePair<double, Team[]>, object>(x => x.Value[0].name)">Team Pair</MudTableSortLabel></MudTh>
                            @if (Calc.dmgType == "dps")
                            {
                                <MudTh> <MudTableSortLabel SortBy="new Func<KeyValuePair<double, Team[]>, object>(x => -(x.Value[0].dpm + x.Value[1].dpm))">TOTAL DPS </MudTableSortLabel></MudTh>
                                <MudTh> <MudTableSortLabel SortBy="new Func<KeyValuePair<double, Team[]>, object>(x => -(x.Value[0].dpmAoe + x.Value[1].dpmAoe))">TOTAL DPS AOE</MudTableSortLabel></MudTh>
                                <MudTh> <MudTableSortLabel SortBy="new Func<KeyValuePair<double, Team[]>, object>(x => -(x.Value[0].dpm + x.Value[1].dpm + x.Value[0].dpmAoe + x.Value[1].dpmAoe)/2)">AVERAGE</MudTableSortLabel></MudTh>
                            }
                            else
                            {
                                <MudTh> <MudTableSortLabel SortBy="new Func<KeyValuePair<double, Team[]>, object>(x => -(x.Value[0].dpm + x.Value[1].dpm))">TOTAL DPM </MudTableSortLabel></MudTh>
                                <MudTh> <MudTableSortLabel SortBy="new Func<KeyValuePair<double, Team[]>, object>(x => -(x.Value[0].dpmAoe + x.Value[1].dpmAoe))">TOTAL DPM AOE</MudTableSortLabel></MudTh>
                                <MudTh> <MudTableSortLabel SortBy="new Func<KeyValuePair<double, Team[]>, object>(x => -(x.Value[0].dpm + x.Value[1].dpm + x.Value[0].dpmAoe + x.Value[1].dpmAoe)/2)">AVERAGE</MudTableSortLabel></MudTh>
                            }
                        </HeaderContent>
                        <RowTemplate>
                            @if (InFilter(context.Value))
                            {
                                <MudTd DataLabel="Team Pair">
                                    <div>
                                        <a class="clickable" @onclick="() => Select(context)" style="@((context.Value == selected || context.Value == compaired) ? "color: var(--color-highlight); font-weight: bold;" : "")">@context.Value[0].name and @context.Value[1].name </a>
                                    </div>
                                </MudTd>
                                @if (Calc.dmgType == "dps")
                                {
                                    <MudTd DataLabel="DPS" Class="text-light">
                                        @(Math.Round((context.Value[0].dps + context.Value[1].dps) / 1000, 2))k
                                    </MudTd>
                                    <MudTd DataLabel="DPS AOE" Class="text-light">
                                        @(Math.Round((Calc.ToDps(context.Value[0].dpmAoe, context.Value[0].rotlen) + Calc.ToDps(context.Value[1].dpmAoe, context.Value[1].rotlen)) / 1000, 2))k
                                    </MudTd>
                                    <MudTd DataLabel="AVERAGE">
                                        @(Math.Round(((context.Value[0].dps + context.Value[1].dps + Calc.ToDps(context.Value[0].dpmAoe, context.Value[0].rotlen) + Calc.ToDps(context.Value[1].dpmAoe, context.Value[1].rotlen)) / 2000), 2))k
                                    </MudTd>
                                }
                                else
                                {
                                    <MudTd DataLabel="DPM" Class="text-light">
                                        @(Math.Round((context.Value[0].dpm + context.Value[1].dpm), 2)) mi
                                    </MudTd>
                                    <MudTd DataLabel="DPM AOE" Class="text-light">
                                        @(Math.Round((context.Value[0].dpmAoe + context.Value[1].dpmAoe), 2)) mi
                                    </MudTd>
                                    <MudTd DataLabel="AVERAGE">
                                        @(Math.Round(((context.Value[0].dpm + context.Value[1].dpm + context.Value[0].dpmAoe + context.Value[1].dpmAoe) / 2), 2)) mi
                                    </MudTd>
                                }
                            }
                        </RowTemplate>
                    </MudTable>
                </div>
            }
        </div>
    }
}

@code
{
    Dictionary<string, SortedDictionary<double, Team[]>[]> everything;
    Dictionary<string, string> svtablestate = new Dictionary<string, string>();
    [Parameter]
    public Team[] selected { get; set; }
    [Parameter]
    public Team[]? compaired { get; set; }
    Team[]? compairmem;
    bool MultipleAccount = false;
    bool Compare = false;
    int Loading = 0;
    string searchString = "";

    [Parameter]
    public EventCallback<Team[]> onselect { get; set; }
    [Parameter]
    public EventCallback<Team[]> oncompare { get; set; }

    protected override async Task OnInitializedAsync()
    {
        everything = Calc.AccountTeamRanker(Calc.teams, null);
        if (everything.Count > 1)
        {
            MultipleAccount = true;
        }
        foreach (var k in everything)
        {
            svtablestate.Add(k.Key, "shown");
        }
        if (compaired != null)
            Compare = true;
        Loading++;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Logic to run after the first render
            StateHasChanged(); // Ensures any updates are reflected in the UI
        }
    }

	async void Select(KeyValuePair<double, Team[]> context)
	{
        if (Compare)
        {
            compaired = context.Value;
            oncompare.InvokeAsync(compaired);
        }
        else
        {
			if (context.Value == selected)
			{
				selected = null;
			}
			else
			{
				selected = context.Value;
                await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
			}
            onselect.InvokeAsync(selected);
        }
	}

    async void Collapse(string server)
    {
        if (svtablestate[server] == "shown")
        {
            svtablestate[server] = "hidden";
        }
        else
        {
            svtablestate[server] = "shown";
        }
    }

	string Test(string name)
	{
		Logger.LogInformation(name);
		return name;
	}

    void ToggleCompare()
    {
        if (Compare)
        {
            compairmem = compaired;
            compaired = null;
        }
        else
        {
            compaired = compairmem;
        }
        Compare = !Compare;
    }

    void NavigateToEditPage()
    {
        Navigation.NavigateTo($"/edit");
    }
    
    async void cssLoaded()
    {
		Loading++;
    }

    bool InFilter(Team[] element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element[0].name.Contains(searchString, StringComparison.OrdinalIgnoreCase) || element[1].name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
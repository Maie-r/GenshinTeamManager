@page "/TeamPairsPage"
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<TeamPairsPage> Logger
<link rel="stylesheet" href="css/tableresize.css" @onload="cssLoaded"/>


@if (Loading < 2)
{
    <span> Loading Teams </span>

}
else
{
    <h1 class="text-center m-2"> Team Pairings </h1>
    @if (Calc.teams.Count <= 0)
    {
        <h4 class="p-4">No teams registered!</h4>
        <h4 class="p-4">you can add them in <a class="clickable" @onclick="NavigateToEditPage">(this page)</a></h4>
    }
    else
    {
        <div class="px-md-2 px-lg-4">
            @if (selected != null)
            {
                <CascadingValue Value="selected" Name="Selected Pair">
                    <CascadingValue Value="compaired" Name="Pair to Compare">
                        <TeamPairDetails />
                    </CascadingValue>
                </CascadingValue>
            }
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="flexCompare" @onchange="ToggleCompare">
                <label class="form-check-label" for="flexCompare">
                    Compare
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="flexCheckMesh" @onchange="ToggleMesh">
                <label class="form-check-label" for="flexCheckMesh">
                    Mesh account tables
                </label>
            </div>
            @foreach (KeyValuePair<string, List<TeamPair>>server in TeamPairer.Pairs)
            {
                @if (MultipleAccount)
                {
                    <a class="clickable d-flex justify-content-center flex-row flex-nowrap text-center" @onclick="() => Collapse(server.Key)"><h2>@server.Key</h2> <MudIcon class="text-center" Size="Size.Large" Icon="@(svtablestate[server.Key] == "shown" ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)"></MudIcon></a>
                }
                <div id="@server.Key" class="@svtablestate[server.Key]">
                    <MudTable Items="@server.Value.AsEnumerable()" Hover="true" SortLabel="Sort by" MultiSort="true" Class="darken-50">
                        <ToolBarContent>
                            <MudTextField @bind-Value="searchString" Placeholder="Search" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 col-8 text-light"></MudTextField>
                            <MudTextField @bind-Value="charsearchString" Placeholder="Character" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 col-4 text-light"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh> <MudTableSortLabel SortBy="new Func<TeamPair, object>(x=>x.Name)">Team Pair</MudTableSortLabel></MudTh>
                            @if (Calc.dmgType == "dps")
                            {
                                <MudTh> <MudTableSortLabel SortBy="new Func<TeamPair, object>(x=>x.Score)">TOTAL DPS </MudTableSortLabel></MudTh>
                                <MudTh> <MudTableSortLabel SortBy="new Func<TeamPair, object>(x=>x.ScoreAoe)">TOTAL DPS AOE</MudTableSortLabel></MudTh>
                                <MudTh> <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<TeamPair, object>(x=>x.ScoreAvg)">AVERAGE</MudTableSortLabel></MudTh>
                            }
                            else
                            {
                                <MudTh> <MudTableSortLabel SortBy="new Func<TeamPair, object>(x=>x.Score)">TOTAL DPM </MudTableSortLabel></MudTh>
                                <MudTh> <MudTableSortLabel SortBy="new Func<TeamPair, object>(x=>x.ScoreAoe)">TOTAL DPM AOE</MudTableSortLabel></MudTh>
                                <MudTh> <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<TeamPair, object>(x=>x.ScoreAvg)">AVERAGE</MudTableSortLabel></MudTh>
                            }
                        </HeaderContent>
                        <RowTemplate>
                            @if (InFilter(context.teams))
                            {
                                <MudTd DataLabel="Team Pair">
                                    <div>
                                        <a class="clickable" @onclick="() => Select(context)" style="@((context == selected || context == compaired) ? "color: var(--color-highlight); font-weight: bold;" : "")">
                                            <span style="color: var(--color-@context.teams[0].characters[0].element)">@context.teams[0].name</span>
                                            and 
                                            <span style="color: var(--color-@context.teams[1].characters[0].element)">@context.teams[1].name</span> 
                                        </a>
                                    </div>
                                </MudTd>
                                @if (Calc.dmgType == "dps")
                                {
                                    <MudTd DataLabel="DPS" Class="text-light">
                                        @(Math.Round(context.DpsScore / 1000, 2))k
                                    </MudTd>
                                    <MudTd DataLabel="DPS AOE" Class="text-light">
                                        @(Math.Round(context.DpsScoreAoe / 1000, 2))k
                                    </MudTd>
                                    <MudTd DataLabel="AVERAGE">
                                        @(Math.Round((context.DpsScoreAvg / 1000), 2))k
                                    </MudTd>
                                }
                                else
                                {
                                    <MudTd DataLabel="DPM" Class="text-light">
                                        @(Math.Round(context.Score, 2)) mi
                                    </MudTd>
                                    <MudTd DataLabel="DPM AOE" Class="text-light">
                                        @(Math.Round(context.ScoreAoe, 2)) mi
                                    </MudTd>
                                    <MudTd DataLabel="AVERAGE">
                                        @(Math.Round(context.ScoreAvg, 2)) mi
                                    </MudTd>
                                }
                            }
                        </RowTemplate>
                    </MudTable>
                </div>
            }
        </div>
    }
}

@code
{
    //Dictionary<string, SortedDictionary<double, Team[]>[]> everything;
    Dictionary<string, string> svtablestate = new Dictionary<string, string>();
    [Parameter]
    public TeamPair selected { get; set; }
    [Parameter]
    public TeamPair? compaired { get; set; }
    TeamPair? compairmem;
    bool MultipleAccount = false;
    bool Compare = false;
    bool Mesh = true;
    int Loading = 0;
    string searchString = "";
    string charsearchString = "";

    [Parameter]
    public EventCallback<TeamPair> onselect { get; set; }
    [Parameter]
    public EventCallback<TeamPair> oncompare { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //everything = Calc.AccountTeamRanker(Calc.teams, null);
        TeamPairer.PairTeams(Mesh);
        TeamPairer.SortPairs(2);
        if (TeamPairer.Pairs.Count > 1)
        {
            MultipleAccount = true;
        }
        foreach (var k in TeamPairer.Pairs)
        {
            svtablestate.Add(k.Key, "shown");
        }
        svtablestate.Add("All", "shown");
        if (compaired != null)
            Compare = true;
        Loading++;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Logic to run after the first render
            StateHasChanged(); // Ensures any updates are reflected in the UI
        }
    }

    async void Select(TeamPair context)
    {
        if (Compare)
        {
            compaired = context;
            oncompare.InvokeAsync(compaired);
        }
        else
        {
            if (context == selected)
            {
                selected = null;
            }
            else
            {
                selected = context;
                await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
            }
            onselect.InvokeAsync(selected);
        }
    }

    async void Collapse(string server)
    {
        if (svtablestate[server] == "shown")
        {
            svtablestate[server] = "hidden";
        }
        else
        {
            svtablestate[server] = "shown";
        }
    }

    string Test(string name)
    {
        Logger.LogInformation(name);
        return name;
    }

    void ToggleCompare()
    {
        if (Compare)
        {
            compairmem = compaired;
            compaired = null;
        }
        else
        {
            compaired = compairmem;
        }
        Compare = !Compare;
    }

    void ToggleMesh()
    {
        MultipleAccount = !Mesh;
        Mesh = !Mesh;
        TeamPairer.PairTeams(Mesh);
        TeamPairer.SortPairs(2);
        StateHasChanged();
    }

    void NavigateToEditPage()
    {
        Navigation.NavigateTo($"/edit");
    }

    async void cssLoaded()
    {
        Loading++;
    }

    bool InFilter(Team[] element)
    {
        if (String.IsNullOrEmpty(searchString))
        {
            return InFilterChar(element);
        }
        bool veredict = false;
        string[] includes = searchString.Split("+");
        foreach (string f in includes)
        {
            string[] or = f.Split(",");
            foreach (string o in or)
            {
                if (element[0].name.Contains(o.Trim(), StringComparison.OrdinalIgnoreCase) || element[1].name.Contains(o.Trim(), StringComparison.OrdinalIgnoreCase))
                {
                    veredict = InFilterChar(element);
                    break;
                }
            }
            if (!veredict)
            {
                return false;
            }
            veredict = false;
        }
        Logger.LogInformation("FELL THROUGH");
        return true;
    }

    bool InFilterChar(Team[] element)
    {
        if (String.IsNullOrEmpty(charsearchString))
        {
            return true;
        }
        bool veredict = false;
        string[] dont = charsearchString.Split("-");
        veredict = InFilterChar(element, dont[0].Split("+"));
        if (dont.Length > 1 && veredict) // if above check failed, skip
        {
            for (int i = 1; i < dont.Length; i++)
            {
                if (InFilterChar(element, dont[i].Split("+"))) // return false because we don't want this character
                {
                    return false;
                }
            }
        }
        return veredict;
    }

    bool InFilterChar(Team[] element, string[] includes)
    {
        bool veredict = false;
        foreach (string f in includes) // must be included
        {
            //Logger.LogInformation("INCLUDES: " + f);
            string[] or = f.Split(",");
            foreach (string o in or) // also include
            {
                foreach (Team team in element)
                {
                    foreach (Character character in team.characters)
                    {
                        if (character.name.Contains(o.Trim(), StringComparison.OrdinalIgnoreCase))
                        {
                            veredict = true;
                            break;
                        }
                    }
                    if (veredict)
                    {
                        break;
                    }
                }
                if (!veredict)
                {
                    //Logger.LogInformation("FAILED AND OPERATION");
                    return false;
                }
                veredict = false;
            }
        }
        return true;
    }

}
@page "/TeamTablePage"
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using MudBlazor
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<TeamTablePage> Logger
@implements IDisposable
<link rel="stylesheet" href="css/tableresize.css" @onload="cssLoaded" />

@if (Loading < 2)
{
    <span class="m-2"> Loading... </span>

}
else
{
    <h1 class="text-center"> Teams </h1>
    @if (Calc.teams.Count <= 0)
    {
        <h3 class="p-4">No teams registered!</h3>
        <h3 class="p-4">you can add them in <a class="clickable" @onclick="NavigateToEditPage">(this page)</a></h3>
    }
    else
    {
        <div class="px-md-2 px-lg-4">
            @if (selected != null)
            {
                <CascadingValue Value="selected" Name="Selected Team">
                    <CascadingValue Value="compaired" Name="Team to compare">
                        <TeamDetails />
                    </CascadingValue>
                </CascadingValue>
            }
            @if (MultipleAccount)
            {
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" value="" id="MultipleAccountcheck" @onchange="ToggleSeparateAccounts">
                    <label class="form-check-label" for="MultipleAccountcheck">
                        Filter by Accounts
                    </label>
                </div>
            }
            <div class="form-check">
                @if (Compare)
                {
                    <input class="form-check-input" type="checkbox" value="" id="Comparecheck" @onchange="ToggleCompare" checked>
                }
                else
                {
                    <input class="form-check-input" type="checkbox" value="" id="Comparecheck" @onchange="ToggleCompare">
                }
                <label class="form-check-label" for="Comparecheck">
                    Compare
                </label>
            </div>
            @if (AccountSeparate)
            {
                foreach (List<Team> account in accountteams)
                {
                    <a class="clickable d-flex flex-row flex-nowrap justify-content-center text-center" @onclick="() => Collapse(account[0].server)"><h2>@account[0].server</h2> <MudIcon class="text-center" Size="Size.Large" Icon="@(svtablestate[account[0].server] == "shown" ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)"></MudIcon></a>
                    <div class="@svtablestate[account[0].server] mb-2">
                        <CascadingValue Value="@account.AsEnumerable()">
                            <TeamTable OnTeamSelected="HandleTeamSelected" selected="selected" compare="compaired"></TeamTable>
                        </CascadingValue>
                    </div>
                }
            }
            else 
            {
                <CascadingValue Value="@Calc.teams.AsEnumerable()">
                    <TeamTable OnTeamSelected="HandleTeamSelected" comparing="Compare" compare="compaired"></TeamTable>
                </CascadingValue>
            }
        </div>
    }
}

@code
{
    Dictionary<string, string> svtablestate = new Dictionary<string, string>();
    Team? selected;
    Team? compaired;
    [Parameter]
    public int selectedid { get; set; }
	[Parameter]
    public int compairedid { get; set; }
    Team? compairmem;
    bool AccountSeparate = false;
    bool MultipleAccount = false;
    bool Compare = false;
    int Loading = 0;

    [Parameter]
    public EventCallback<int> onselect { get; set; }
    [Parameter]
    public EventCallback<int> oncompare { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (Calc.GetAcountAmount(Calc.teams) > 1)
        {
            MultipleAccount = true;
            accountteams = Calc.AccountSeparate(Calc.teams, null);
            foreach (var account in accountteams)
            {
                svtablestate.Add(account[0].server, "shown");
            }
        }
        if (selectedid != -1)
		    selected = Calc.teams[selectedid];
		if (compairedid != -1)
        {
            compaired = Calc.teams[compairedid];
			Compare = true;
        }
        Loading++;
    }

    List<List<Team>> accountteams;

    void ToggleSeparateAccounts()
    {
        AccountSeparate = !AccountSeparate;
    }
    void ToggleCompare()
    {
        if (Compare){
            compairmem = compaired;
            compaired = null;
        }
        else {
            compaired = compairmem;
        }
        Compare = !Compare;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Logic to run after the first render
            StateHasChanged(); // Ensures any updates are reflected in the UI
        }
    }

    async void HandleTeamSelected(Team team)
    {
        if (Compare)
        {
            compaired = team;
            oncompare.InvokeAsync(Calc.teams.IndexOf(compaired));
        }
        else
        {
            if (team == selected)
            {
                selected = null;
                onselect.InvokeAsync(-1);
            }
            else
            {
                selected = team;
                await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
                onselect.InvokeAsync(Calc.teams.IndexOf(selected));
            }
            
        }
    }

    async void cssLoaded()
    {
        Loading++;
    }

    void NavigateToEditPage()
    {
        Navigation.NavigateTo($"/edit");
    }

    async void Collapse(string server)
    {
        if (svtablestate[server] == "shown")
        {
            svtablestate[server] = "hidden";
        }
        else
        {
            svtablestate[server] = "shown";
        }
    }


    public void Dispose()
    {
        // Cleanup logic
    }
}